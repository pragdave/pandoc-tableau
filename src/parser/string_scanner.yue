import "parser.util"

export class StringScanner

  new: (str) =>
    @str = str
    @pos = 1
    @pos_stack = {}
    @last_match = nil


  skip: (pattern) =>
    s, e = @str\find("^" .. pattern, @pos)
    @pos = e + 1 if e
    e

  skipws: () =>
    @skip("%s*")

  scan: (pattern) =>
    s, e, c1, c2, c3 = @str\find("^" .. pattern, @pos)
    return nil unless e
    @pos = e + 1 if e
    @last_match = @str\sub(s, e)
    @last_match, c1, c2, c3

  expect: (pattern, msg) =>
    @scan(pattern) or @parse_error(msg)

  looking_at: (pattern) =>
    s, e = @str\find("^" .. pattern, @pos)
    not not e

  peek: (len) =>
    @str\sub(@pos, @pos + len)

  empty: () => @pos > #@str

  save_place: () => @pos_stack[] = @pos

  restore_place: () => @pos = table.remove(@pos_stack)

  parse_error: (msg) =>
    err = { "\nTableau: #{msg}\n#{@state()}\n" }
    for level = 4,2,-1
      f = debug.getinfo(level)
      err[] = "#{f.source}: #{f.currentline} #{f.name}"
    err |> table.concat("\n") |> error()

  state: () => 
    -- dump(self) 
    "#{@str\sub(1, @pos-1)} «#{@str\sub(@pos, @pos)}» #{@str\sub(@pos+1)}"



