dump = require("./parser/util").dump
parse = require("./parser/ast").parse
import "virtual_table" as { :VirtualTable }

if false then dump("just here to remove the 'unused' warning") 

----------------------------------------------------------------------------------
local append = table.insert

md2ast = (str) ->
  pandoc.read(str).blocks
 

----------------------------------------------------------------------------------
const LINE_LEFT   = 1
const LINE_RIGHT  = 2
const LINE_TOP    = 4
const LINE_BOTTOM = 8

-- decode_lines = (spec) =>
--   result = 0
--   for i = 1, string.len(spec)
--     switch spec\sub(i, 1)
--       when "[" then result |= 1
--       when "]" then result |= 2
--       when "~" then result |= 4
--       when "_" then result |= 8
--   result

class CellAttribute
  new: (content)=> 
    @content = content
    @width   = nil
    @fg      = nil
    @bg      = nil
    @align   = nil
    @lines   = 0
    @styles  = {}

  merge: (format_list) =>
    for fmt in *format_list
      switch fmt.type

        when "width"
          @width = fmt.spec   -- overwrite

        when "lines"
          @lines |= decode_lines(fmt.spec)

        else
          io.error\write("\n\nUnknown format #{fmt.type} ignored\n\n")

----------------------------------------------------------------------------------
extract_cells_and_attributes = (table) ->
  cells = (row) ->
    return [ CellAttribute(cell.content) for cells in *row ]
  return [ cells(row) for row in *table ]

----------------------------------------------------------------------------------
caption = (cap) ->
  if cap
    md2ast(cap)
  else
    {}

----------------------------------------------------------------------------------
alignment_for = (spec) ->
  switch spec
    when "l" then "AlignLeft"
    when "r" then "AlignRight"
    else          "AlignCenter"

----------------------------------------------------------------------------------
colspecs = (table) ->
  specs = table.colspecs
  return  [ { alignment_for(s[1]), s[2]} for s in *specs ]

----------------------------------------------------------------------------------
attr = (cell, id) ->
  classes = {}
  table_attributes = {}

  for cls in *cell.styles
    append(classes, cls)

  if cell.fg
    if cell.fg.color_type == "rgb"
      table_attributes["style"] = "color: #{cell.fg.name}"
    else
      classes[] = "fg-#{cell.fg.name}"

  if cell.bg
    if cell.bg.color_type == "rgb"
      table_attributes["style"] = "background-color: #{cell.bg.name}"
    else
      classes[] = "bg-#{cell.bg.name}"

  h_align = cell.h_align
  classes[] = "align-h-#{h_align}" if h_align

  v_align = cell.v_align
  classes[] = "align-v-#{v_align}" if v_align


  if cell.font_size
    size = cell.font_size
    switch size.type
      when "small", "large"
        classes[] = "tableau-#{size.type}"
        if size.amount > 0
          classes[] = "tableau-size-#{string.rep('x', size.amount)}"
      when "normal"
        classes[] = "medium"

  pandoc.Attr(id or "", classes, table_attributes)


----------------------------------------------------------------------------------
cell_holder = (cell) ->
  pandoc.Cell(
    md2ast(cell.content |> table.concat("\n")),
    "AlignCenter",  -- alignmentFor(f.alignment),
    cell.row_span,
    cell.col_span
    attr(cell, "")
  )

----------------------------------------------------------------------------------
local maybe_add_hidden_cell
if quarto.doc.is_format("pdf") 
  maybe_add_hidden_cell = (cells, c) ->
    append(cells, cell_holder(c))
else
  maybe_add_hidden_cell = (cells, c) ->
    if not c.hidden_by_span then
      append(cells, cell_holder(c))

----------------------------------------------------------------------------------
convert_row = (cells) ->
  local *
  result = {}
  for cell in *cells
    maybe_add_hidden_cell(result, cell)
  pandoc.Row(result)

----------------------------------------------------------------------------------
convert_rows = (table) ->
  return [ convert_row(row_of_cells) for row_of_cells in *table]

----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
find_and_mark_contiguous_block = (body, r, c, group) -> -- TODO: rework once algo settles

  -- 1. determine # rows with same group in first column -> row_span
  row_span = 0
  while (r+row_span) <= #body and body[r+row_span][c].span_group == group
    row_span += 1

  -- 2. For each column, scan down up to row_span rows. If there's a cell
  --    that doesn't have the same group, row_span becomes it's relative row - 1
  max_col = #body[1]
  col = c
  while col <= max_col and body[r][col].span_group == group
    row = r
    while row < (r + row_span) and body[row][col].span_group == group
      row = row + 1
    row_span = math.min(row_span, row - r + 1)
    col += 1

  col_span = col - c 

  -- 3. if row_span > 1 and  col_span > 1 then mark all cells except the root
  --    as "hidden_by_span", and set the row and column span in the root.
  if row_span > 1 or col_span > 1
    for row = 0, row_span - 1
      for col = 0, col_span - 1
        body[r+row][c+col].span_group = nil
        body[r+row][c+col].hidden_by_span = true

    body[r][c].hidden_by_span = false
    body[r][c].row_span = row_span if row_span > 1
    body[r][c].col_span = col_span if col_span > 1

----------------------------------------------------------------------------------
merge_spans = (body) ->
  for r = 1, #body
    local row = body[r]
    for c = 1, #row
      cell = row[c]
      if cell.span_group
        find_and_mark_contiguous_block(body, r, c, cell.span_group)

----------------------------------------------------------------------------------
table_body = (table) -> 
  merge_spans(table)
  body = convert_rows(table)
  {
    head: {},
    body: convert_rows(table)
    row_head_columns: 0,
    attr: pandoc.Attr()
  }


----------------------------------------------------------------------------------
table_attr = (table) ->
  classes = { "tableau-table" }
  table_attributes = {}

  for cls in *table.styles
    append(classes, cls)

  if table.fg
    if table.fg.color_type == "rgb"
      table_attributes["style"] = "color: #{table.fg.name}"
    else
      classes[] = "fg-#{table.fg.name}"

  if table.bg
    if table.bg.color_type == "rgb"
      table_attributes["style"] = "background-color: #{table.bg.name}"
    else
      classes[] = "bg-#{table.bg.name}"

  pandoc.Attr(table.id or "", classes, table_attributes)
----------------------------------------------------------------------------------
pandoc_table_from = (table, id) ->
  rows = extract_cells_and_attributes(table)
  result = pandoc.Table \
    caption(table.caption),
    colspecs(table),
    pandoc.TableHead({}),
    { table_body(table.table) }, 
    pandoc.TableFoot({}),
    table_attr(table)
  result

----------------------------------------------------------------------------------
export CodeBlock = (block) ->
  return unless block.classes[1] == "tableau"

  ast = parse(block.text)
  return unless ast

  table = VirtualTable(ast)
  pandoc_table_from(table, block.attr.identifier)

quarto.doc.add_html_dependency({
  name: "tableau",
  version: "1.0.0",
  stylesheets: {"assets/tableau.css"}
})

export { :CodeBlock }
