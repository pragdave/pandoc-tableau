import "u-test" as test
import "parser.util" as { :dump }
import "parser.parse_selector" as { parse_selector_from_string: ps }
import "iterate_selector" as { iterate_selectors: is }
const ROWS = 3
const COLS = 5

ast = {
  row_count: ROWS,
  col_count: COLS,
}

print "\n\nTEST ITERATE_SELECTOR\n"

test_selector = (selector, expected) ->
  test.selector[selector] = () ->
    sel = ps(ast, selector)
    result = {}
    is(sel, (r,c) -> result[] = { r, c})
    test.equal #expected, #result
    for i = 1, #expected
      test.equal expected[i][1], result[i][1]
      test.equal expected[i][2], result[i][2]

------
test_selector("r2:c3", { {2,3} })
test_selector("r2,3:c4", { {2,4}, {3,4} })
test_selector("r2,3:c4,5", { {2,4}, {2,5}, {3,4}, {3,5} })
test_selector("r2-3:c4-5", { {2,4}, {2,5}, {3,4}, {3,5} })
test_selector("r2-4:c4-5", { {2,4}, {2,5}, {3,4}, {3,5}, {4,4}, {4,5} })
test_selector("r2-3,4:c4-5", { {2,4}, {2,5}, {3,4}, {3,5}, {4,4}, {4,5} })

-- multiple selectors
test_selector("r2:c4;r3:c5", { {2,4}, {3,5} })
test_selector("r2:c4;r3:c5", { {2,4}, {3,5} })

-- skips: absolute
test_selector("r1:c1-5/even", { {1,2}, {1,4} })
test_selector("r1:c1-5/odd",  { {1,1}, {1,3}, {1,5} })
test_selector("r1:c1-6/3",    { {1,3}, {1,6} })

-- skips: relative
test_selector("r1:c1-5\\even", { {1,1}, {1,3}, {1,5} })
test_selector("r1:c1-5\\odd",  { {1,2}, {1,4} })
test_selector("r1:c1-6\\3",    { {1,1}, {1,4} })

-- skips: absolute, not starting at 1
test_selector("r1:c2-6/even", { {1,2}, {1,4}, {1,6} })
test_selector("r1:c2-6/odd",  { {1,3}, {1,5} })
test_selector("r1:c2-7/3",    { {1,3}, {1,6} })

-- skips: relative
test_selector("r1:c2-6\\even", { {1,2}, {1,4}, {1,6} })
test_selector("r1:c2-6\\odd",  { {1,3}, {1,5} })
test_selector("r1:c2-7\\3",    { {1,2}, {1,5} })

-- absolute end
test_selector("r$r:c$c", { {3,5} })

-- absolute end with adjustment
test_selector("r$r~1:c$c~2", { {2,3} })

-- using current row in column
test_selector("r:c@r", { {1,1}, {2,2}, {3,3} })

-- using current row in column with offset
test_selector("r:c@r+1", { {1,2}, {2,3}, {3,4} })
